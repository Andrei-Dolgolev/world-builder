{
    "phaser-blank": "// Define the scene first\nclass SnakeScene extends Phaser.Scene {\n  constructor() {\n    super('SnakeScene');\n    this.snake = [];\n    this.food = null;\n    this.direction = 'right';\n    this.nextDirection = 'right';\n    this.gridSize = 16;\n    this.speed = 100;\n    this.moveTime = 0;\n    this.score = 0;\n    this.scoreText = null;\n    this.gameOverText = null;\n    this.isGameOver = false;\n  }\n\n  preload() {\n    // Load assets\n    this.load.image('food', 'https://labs.phaser.io/assets/sprites/apple.png');\n    this.load.image('body', 'https://labs.phaser.io/assets/sprites/orb-blue.png');\n    this.load.image('head', 'https://labs.phaser.io/assets/sprites/orb-red.png');\n  }\n\n  create() {\n    // Create snake\n    this.createSnake();\n    \n    // Create food\n    this.food = this.physics.add.image(0, 0, 'food');\n    this.food.setOrigin(0.5);\n    this.food.setScale(0.5);\n    this.repositionFood();\n    \n    // Set up controls\n    this.cursors = this.input.keyboard.createCursorKeys();\n    \n    // Add score text\n    this.scoreText = this.add.text(16, 16, 'Score: 0', { \n      fontSize: '32px', \n      fill: '#fff' \n    });\n    \n    // Game over text (hidden initially)\n    this.gameOverText = this.add.text(\n      400, \n      300, \n      'GAME OVER\\nPress SPACE to restart', \n      { fontSize: '48px', fill: '#ff0000', align: 'center' }\n    );\n    this.gameOverText.setOrigin(0.5);\n    this.gameOverText.setVisible(false);\n    \n    // Restart key\n    this.input.keyboard.on('keydown-SPACE', () => {\n      if (this.isGameOver) {\n        this.scene.restart();\n      }\n    });\n  }\n\n  update(time, delta) {\n    if (this.isGameOver) return;\n    \n    // Handle input\n    this.handleInput();\n    \n    // Move the snake\n    if (time >= this.moveTime) {\n      this.moveSnake();\n      this.moveTime = time + this.speed;\n    }\n  }\n\n  createSnake() {\n    // Start with 3 segments\n    this.snake = [];\n    \n    // Create head\n    const head = this.physics.add.image(400, 300, 'head');\n    head.setOrigin(0.5);\n    this.snake.push(head);\n    \n    // Create body segments\n    for (let i = 0; i < 2; i++) {\n      const segment = this.physics.add.image(400 - ((i+1) * this.gridSize), 300, 'body');\n      segment.setOrigin(0.5);\n      this.snake.push(segment);\n    }\n  }\n\n  handleInput() {\n    // Change direction based on cursor keys\n    if (this.cursors.left.isDown && this.direction !== 'right') {\n      this.nextDirection = 'left';\n    } else if (this.cursors.right.isDown && this.direction !== 'left') {\n      this.nextDirection = 'right';\n    } else if (this.cursors.up.isDown && this.direction !== 'down') {\n      this.nextDirection = 'up';\n    } else if (this.cursors.down.isDown && this.direction !== 'up') {\n      this.nextDirection = 'down';\n    }\n  }\n\n  moveSnake() {\n    // Update direction\n    this.direction = this.nextDirection;\n    \n    // Get the head position\n    let headX = this.snake[0].x;\n    let headY = this.snake[0].y;\n    \n    // Calculate new head position\n    switch (this.direction) {\n      case 'left':\n        headX -= this.gridSize;\n        break;\n      case 'right':\n        headX += this.gridSize;\n        break;\n      case 'up':\n        headY -= this.gridSize;\n        break;\n      case 'down':\n        headY += this.gridSize;\n        break;\n    }\n    \n    // Check if out of bounds\n    if (headX < 0 || headX >= 800 || headY < 0 || headY >= 600) {\n      this.gameOver();\n      return;\n    }\n    \n    // Check if snake hit itself\n    for (let i = 1; i < this.snake.length; i++) {\n      if (headX === this.snake[i].x && headY === this.snake[i].y) {\n        this.gameOver();\n        return;\n      }\n    }\n    \n    // Check if snake ate food\n    const ateFood = Math.abs(headX - this.food.x) < this.gridSize/2 &&\n                    Math.abs(headY - this.food.y) < this.gridSize/2;\n    \n    if (ateFood) {\n      // Add new segment\n      const lastSegment = this.snake[this.snake.length - 1];\n      const newSegment = this.physics.add.image(lastSegment.x, lastSegment.y, 'body');\n      newSegment.setOrigin(0.5);\n      this.snake.push(newSegment);\n      \n      // Update score\n      this.score += 10;\n      this.scoreText.setText('Score: ' + this.score);\n      \n      // Speed up slightly\n      this.speed = Math.max(50, this.speed - 2);\n      \n      // Move food to new position\n      this.repositionFood();\n    }\n    \n    // Move snake body\n    for (let i = this.snake.length - 1; i > 0; i--) {\n      this.snake[i].x = this.snake[i-1].x;\n      this.snake[i].y = this.snake[i-1].y;\n    }\n    \n    // Move head\n    this.snake[0].x = headX;\n    this.snake[0].y = headY;\n  }\n\n  repositionFood() {\n    // Grid positions\n    const gridWidth = Math.floor(800 / this.gridSize);\n    const gridHeight = Math.floor(600 / this.gridSize);\n    \n    // Random position (aligned to grid)\n    let x, y;\n    let validPosition = false;\n    \n    while (!validPosition) {\n      x = Phaser.Math.Between(1, gridWidth - 2) * this.gridSize;\n      y = Phaser.Math.Between(1, gridHeight - 2) * this.gridSize;\n      \n      // Check if position overlaps with snake\n      validPosition = true;\n      for (let segment of this.snake) {\n        if (Math.abs(segment.x - x) < this.gridSize/2 && \n            Math.abs(segment.y - y) < this.gridSize/2) {\n          validPosition = false;\n          break;\n        }\n      }\n    }\n    \n    this.food.x = x;\n    this.food.y = y;\n  }\n  \n  gameOver() {\n    this.isGameOver = true;\n    this.gameOverText.setVisible(true);\n  }\n}\n\n// Initialize Phaser with the scene\nconst config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 0 },\n      debug: false\n    }\n  },\n  scene: [SnakeScene]\n};\n\n// Start the game immediately\nconst game = new Phaser.Game(config);"
}